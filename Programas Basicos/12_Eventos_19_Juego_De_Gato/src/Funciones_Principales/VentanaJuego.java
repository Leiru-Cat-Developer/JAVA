package Funciones_Principales;
import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
public class VentanaJuego extends javax.swing.JFrame {
    private boolean casilla[][] = new boolean[3][3];                            //MATRIZ "SIMULA EL JUEGO"
    private String turno = "Jugador1";                                          //SIEMPRE COMIENZA "JUGADOR 1"
    private int matrizGanador[][] = new int[3][3];                              //MATRIZ "VISUALIZA AL GANADOR"
    private String jugador1 = "", jugador2 = "";
    private int vecesQueGanoJugador1 = 0, vecesQueGanoJugador2 = 0, vecesQueEmpataron = 0;
    public VentanaJuego(String jugador1, String jugador2) {
        this.jugador1 = jugador1;
        this.jugador2 = jugador2;
        initComponents();
        this.setExtendedState(VentanaJuego.MAXIMIZED_BOTH);                 //VENTANA MAXIMIZADA AL INICIO
        llenarCasillas();
        llenarMatrizGanador();
    }
    private void llenarCasillas(){
        //INICIA LA MATRIZ CON VALORES BOOLEANOS PARA LA COMPROBACIÓN DEL GANADOR
        for(int i=0; i<3; i++){
            for(int j=0; j<3; j++){
                casilla[i][j] = true;
            }
        }
    }
    private void llenarMatrizGanador(){
        //INICIA LA MATRIZ CON VALORES ENTEROS "0" PARA DIBUJAR LA MATRIZ Y NOTAR UN CAMBIO AL DIBUJAR
        for(int i=0; i<3; i++){
            for(int j=0; j<3; j++){
                matrizGanador[i][j] = 0;
            }
        }
    }
    private void dibujarX(JButton boton){
        //COLOCA UNA "x" AL PRESIONAR UN BOTÓN
        boton.setIcon(new ImageIcon(getClass().getResource("/Imagenes/X_Juego.png")));
    }
    private void dibujarO(JButton boton){
        //COLOCA UN "o" AL PRESIONAR UN BOTÓN
        boton.setIcon(new ImageIcon(getClass().getResource("/Imagenes/O_Juego.png")));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal1 = new javax.swing.JPanel();
        botonArribaIzquierda = new javax.swing.JButton();
        botonCentroArriba = new javax.swing.JButton();
        botonArribaDerecha = new javax.swing.JButton();
        botonCentroIzquierda = new javax.swing.JButton();
        botonCentro = new javax.swing.JButton();
        botonCentroDerecha = new javax.swing.JButton();
        botonAbajoIzquierda = new javax.swing.JButton();
        botonCentroAbajo = new javax.swing.JButton();
        botonAbajoDerecha = new javax.swing.JButton();
        barraDeMenu = new javax.swing.JMenuBar();
        menuJuego = new javax.swing.JMenu();
        subMenuReiniciarJuego = new javax.swing.JMenuItem();
        subMenuMostrarResultados = new javax.swing.JMenuItem();
        separador1 = new javax.swing.JPopupMenu.Separator();
        subMenuSalir = new javax.swing.JMenuItem();
        menuAyuda = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Juego De Gato");
        setUndecorated(true);

        panelPrincipal1.setLayout(new java.awt.GridLayout(3, 3));

        botonArribaIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonArribaIzquierdaActionPerformed(evt);
            }
        });
        panelPrincipal1.add(botonArribaIzquierda);

        botonCentroArriba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCentroArribaActionPerformed(evt);
            }
        });
        panelPrincipal1.add(botonCentroArriba);

        botonArribaDerecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonArribaDerechaActionPerformed(evt);
            }
        });
        panelPrincipal1.add(botonArribaDerecha);

        botonCentroIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCentroIzquierdaActionPerformed(evt);
            }
        });
        panelPrincipal1.add(botonCentroIzquierda);

        botonCentro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCentroActionPerformed(evt);
            }
        });
        panelPrincipal1.add(botonCentro);

        botonCentroDerecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCentroDerechaActionPerformed(evt);
            }
        });
        panelPrincipal1.add(botonCentroDerecha);

        botonAbajoIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbajoIzquierdaActionPerformed(evt);
            }
        });
        panelPrincipal1.add(botonAbajoIzquierda);

        botonCentroAbajo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCentroAbajoActionPerformed(evt);
            }
        });
        panelPrincipal1.add(botonCentroAbajo);

        botonAbajoDerecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbajoDerechaActionPerformed(evt);
            }
        });
        panelPrincipal1.add(botonAbajoDerecha);

        menuJuego.setText("Juego");
        menuJuego.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        menuJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuJuegoActionPerformed(evt);
            }
        });

        subMenuReiniciarJuego.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        subMenuReiniciarJuego.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Icono_Reinicio.png"))); // NOI18N
        subMenuReiniciarJuego.setText("Reiniciar Juego");
        subMenuReiniciarJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuReiniciarJuegoActionPerformed(evt);
            }
        });
        menuJuego.add(subMenuReiniciarJuego);

        subMenuMostrarResultados.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        subMenuMostrarResultados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Icono_Resultados.png"))); // NOI18N
        subMenuMostrarResultados.setText("Mostrar Resultados");
        subMenuMostrarResultados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuMostrarResultadosActionPerformed(evt);
            }
        });
        menuJuego.add(subMenuMostrarResultados);
        menuJuego.add(separador1);

        subMenuSalir.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        subMenuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Icono_Cerrar.png"))); // NOI18N
        subMenuSalir.setText("Salir");
        subMenuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuSalirActionPerformed(evt);
            }
        });
        menuJuego.add(subMenuSalir);

        barraDeMenu.add(menuJuego);

        menuAyuda.setText("Ayuda");
        menuAyuda.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        menuAyuda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAyudaMouseClicked(evt);
            }
        });
        menuAyuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAyudaActionPerformed(evt);
            }
        });
        barraDeMenu.add(menuAyuda);

        setJMenuBar(barraDeMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void subMenuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuSalirActionPerformed
        //SALIR DEL PROGRAMA
        System.exit(0);
    }//GEN-LAST:event_subMenuSalirActionPerformed
    private void botonArribaIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonArribaIzquierdaActionPerformed
        if(casilla[0][0] == true){
            if(turno.equals("Jugador1")){
                //TURNO DE JUGADOR 1 Y CAMBIA A JUGADOR 2
                dibujarX(botonArribaIzquierda);
                matrizGanador[0][0] = 1;
                turno = "Jugador2";
            }else if(turno.equals("Jugador2")){
                //TURNO DE JUGADOR 2 Y CAMBIA A JUGADOR 1
                dibujarO(botonArribaIzquierda);
                matrizGanador[0][0] = 2;
                turno = "Jugador1";
            }
            casilla[0][0] = false;                                              //DESACTIVAMOS BOTON JUGADO
            comprobarQuienEsElGanador();
        }
    }//GEN-LAST:event_botonArribaIzquierdaActionPerformed
    private void botonCentroArribaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCentroArribaActionPerformed
        if(casilla[0][1] == true){
            if(turno.equals("Jugador1")){
                //TURNO DE JUGADOR 1 Y CAMBIA A JUGADOR 2
                dibujarX(botonCentroArriba);
                matrizGanador[0][1] = 1;
                turno = "Jugador2";
            }else if(turno.equals("Jugador2")){
                //TURNO DE JUGADOR 2 Y CAMBIA A JUGADOR 1
                dibujarO(botonCentroArriba);
                matrizGanador[0][1] = 2;
                turno = "Jugador1";
            }
            casilla[0][1] = false;                                              //DESACTIVAMOS BOTON JUGADO
            comprobarQuienEsElGanador();
        }
    }//GEN-LAST:event_botonCentroArribaActionPerformed
    private void botonArribaDerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonArribaDerechaActionPerformed
        if(casilla[0][2] == true){
            if(turno.equals("Jugador1")){
                //TURNO DE JUGADOR 1 Y CAMBIA A JUGADOR 2
                dibujarX(botonArribaDerecha);
                matrizGanador[0][2] = 1;
                turno = "Jugador2";
            }else if(turno.equals("Jugador2")){
                //TURNO DE JUGADOR 2 Y CAMBIA A JUGADOR 1
                dibujarO(botonArribaDerecha);
                matrizGanador[0][2] = 2;
                turno = "Jugador1";
            }
            casilla[0][2] = false;                                              //DESACTIVAMOS BOTON JUGADO
            comprobarQuienEsElGanador();
        }
    }//GEN-LAST:event_botonArribaDerechaActionPerformed
    private void botonCentroIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCentroIzquierdaActionPerformed
        if(casilla[1][0] == true){
            if(turno.equals("Jugador1")){
                //TURNO DE JUGADOR 1 Y CAMBIA A JUGADOR 2
                dibujarX(botonCentroIzquierda);
                matrizGanador[1][0] = 1;
                turno = "Jugador2";
            }else if(turno.equals("Jugador2")){
                //TURNO DE JUGADOR 2 Y CAMBIA A JUGADOR 1
                dibujarO(botonCentroIzquierda);
                matrizGanador[1][0] = 2;
                turno = "Jugador1";
            }
            casilla[1][0] = false;                                              //DESACTIVAMOS BOTON JUGADO
            comprobarQuienEsElGanador();
        }
    }//GEN-LAST:event_botonCentroIzquierdaActionPerformed
    private void botonCentroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCentroActionPerformed
        if(casilla[1][1] == true){
            if(turno.equals("Jugador1")){
                //TURNO DE JUGADOR 1 Y CAMBIA A JUGADOR 2
                dibujarX(botonCentro);
                matrizGanador[1][1] = 1;
                turno = "Jugador2";
            }else if(turno.equals("Jugador2")){
                //TURNO DE JUGADOR 2 Y CAMBIA A JUGADOR 1
                dibujarO(botonCentro);
                matrizGanador[1][1] = 2;
                turno = "Jugador1";
            }
            casilla[1][1] = false;                                              //DESACTIVAMOS BOTON JUGADO
            comprobarQuienEsElGanador();
        }
    }//GEN-LAST:event_botonCentroActionPerformed
    private void botonCentroDerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCentroDerechaActionPerformed
        if(casilla[1][2] == true){
            if(turno.equals("Jugador1")){
                //TURNO DE JUGADOR 1 Y CAMBIA A JUGADOR 2
                dibujarX(botonCentroDerecha);
                matrizGanador[1][2] = 1;
                turno = "Jugador2";
            }else if(turno.equals("Jugador2")){
                //TURNO DE JUGADOR 2 Y CAMBIA A JUGADOR 1
                dibujarO(botonCentroDerecha);
                matrizGanador[1][2] = 2;
                turno = "Jugador1";
            }
            casilla[1][2] = false;                                              //DESACTIVAMOS BOTON JUGADO
            comprobarQuienEsElGanador();
        }
    }//GEN-LAST:event_botonCentroDerechaActionPerformed
    private void botonAbajoIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbajoIzquierdaActionPerformed
        if(casilla[2][0] == true){
            if(turno.equals("Jugador1")){
                //TURNO DE JUGADOR 1 Y CAMBIA A JUGADOR 2
                dibujarX(botonAbajoIzquierda);
                matrizGanador[2][0] = 1;
                turno = "Jugador2";
            }else if(turno.equals("Jugador2")){
                //TURNO DE JUGADOR 2 Y CAMBIA A JUGADOR 1
                dibujarO(botonAbajoIzquierda);
                matrizGanador[2][0] = 2;
                turno = "Jugador1";
            }
            casilla[2][0] = false;                                              //DESACTIVAMOS BOTON JUGADO
            comprobarQuienEsElGanador();
        }
    }//GEN-LAST:event_botonAbajoIzquierdaActionPerformed
    private void botonCentroAbajoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCentroAbajoActionPerformed
        if(casilla[2][1] == true){
            if(turno.equals("Jugador1")){
                //TURNO DE JUGADOR 1 Y CAMBIA A JUGADOR 2
                dibujarX(botonCentroAbajo);
                matrizGanador[2][1] = 1;
                turno = "Jugador2";
            }else if(turno.equals("Jugador2")){
                //TURNO DE JUGADOR 2 Y CAMBIA A JUGADOR 1
                dibujarO(botonCentroAbajo);
                matrizGanador[2][1] = 2;
                turno = "Jugador1";
            }
            casilla[2][1] = false;                                              //DESACTIVAMOS BOTON JUGADO
            comprobarQuienEsElGanador();
        }
    }//GEN-LAST:event_botonCentroAbajoActionPerformed
    private void botonAbajoDerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbajoDerechaActionPerformed
        if(casilla[2][2] == true){
            if(turno.equals("Jugador1")){
                //TURNO DE JUGADOR 1 Y CAMBIA A JUGADOR 2
                dibujarX(botonAbajoDerecha);
                matrizGanador[2][2] = 1;
                turno = "Jugador2";
            }else if(turno.equals("Jugador2")){
                //TURNO DE JUGADOR 2 Y CAMBIA A JUGADOR 1
                dibujarO(botonAbajoDerecha);
                matrizGanador[2][2] = 2;
                turno = "Jugador1";
            }
            casilla[2][2] = false;                                              //DESACTIVAMOS BOTON JUGADO
            comprobarQuienEsElGanador();
        }
    }//GEN-LAST:event_botonAbajoDerechaActionPerformed
    private void subMenuMostrarResultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuMostrarResultadosActionPerformed
        VentanaMostrarResultados VMR = new VentanaMostrarResultados(this, true, jugador1, jugador2, vecesQueGanoJugador1, vecesQueGanoJugador2, vecesQueEmpataron);
        VMR.setVisible(true);
    }//GEN-LAST:event_subMenuMostrarResultadosActionPerformed
    private void menuJuegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuJuegoActionPerformed
        //ACCIÓN INÚTIL
    }//GEN-LAST:event_menuJuegoActionPerformed
    private void subMenuReiniciarJuegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuReiniciarJuegoActionPerformed
        vecesQueGanoJugador1 = 0;
        vecesQueGanoJugador2 = 0; 
        vecesQueEmpataron = 0;
        reiniciarJuego();
    }//GEN-LAST:event_subMenuReiniciarJuegoActionPerformed
    private void menuAyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAyudaActionPerformed
        //ACCIÓN INÚTIL
    }//GEN-LAST:event_menuAyudaActionPerformed
    private void menuAyudaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuAyudaMouseClicked
        //ABRIR LINKS EXTERNOS
        try {
            try {
                Desktop.getDesktop().browse(new URI("https://www.guiainfantil.com/articulos/ocio/juegos/juego-de-tres-en-raya-como-jugar-con-los-ninos-con-papel-y-lapiz/"));
            } catch (IOException ex) {
                Logger.getLogger(VentanaJuego.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (URISyntaxException ex) {
            Logger.getLogger(VentanaJuego.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuAyudaMouseClicked
    private void comprobarQuienEsElGanador(){
        int casillasEmpate = 0;
        //INICIA ABAJO MATRIZ DIBUJADA EN CONSOLA
        for(int i=0; i<3; i++){
            for(int j=0; j<3; j++){
                System.out.print(matrizGanador[i][j]+" ");
            }
            System.out.println("");
        }
        System.out.println("");
        //TERMINA ARRIBA MATRIZ DIBUJADA EN CONSOLA
        boolean ganadorJugador1 = false;
        boolean ganadorJugador2 = false;
        ganadorJugador1 = comprobarLineaDeLaMatriz(1);                          //COMPRUEBA SI GANA JUGADOR 1
        ganadorJugador2 = comprobarLineaDeLaMatriz(2);                          //COMPRUEBA SI GANA JUGADOR 2
        if(ganadorJugador1 == true){
            System.out.println("EL GANADOR ES "+jugador1+"\n");              //MENSAJE DE COMPROBACIÓN
            vecesQueGanoJugador1++;
            VentanaGanador v = new VentanaGanador(this, true, jugador1);
            v.setVisible(true);
            reiniciarJuego();
        }else if(ganadorJugador2 == true){
            System.out.println("EL GANADOR ES "+jugador2+"\n");              //MENSAJE DE COMPROBACIÓN
            vecesQueGanoJugador2++;
            VentanaGanador v = new VentanaGanador(this, true, jugador2);
            v.setVisible(true);
            reiniciarJuego();
        }else{
            //EN CASO DE QUE EL TABLERO ESTÉ LLENO Y SE DECLARE EMPATE
            for(int i=0; i<3; i++){
                for(int j=0; j<3; j++){
                    if(matrizGanador[i][j]!=0){                                 //PUEDE HABER '1' O '2'
                        casillasEmpate++;
                    }
                }
            }
            if(casillasEmpate == 9){
                System.out.println("EMPATE"+"\n");
                vecesQueEmpataron++;
                VentanaEmpate vE = new VentanaEmpate(this, true);
                vE.setVisible(true);
                reiniciarJuego();
            }else{
                casillasEmpate = 0;
            }
        }
    }
    private boolean comprobarLineaDeLaMatriz(int numero){
        boolean ganador = false;
        if((matrizGanador[0][0]==numero)&&(matrizGanador[0][1]==numero)&&(matrizGanador[0][2]==numero)){
            //PRIMERA COMBINACIÓN [HORIZONTAL]
            ganador = true;
        }else if((matrizGanador[1][0]==numero)&&(matrizGanador[1][1]==numero)&&(matrizGanador[1][2]==numero)){
            //SEGUNDA COMBINACIÓN [HORIZONTAL]
            ganador = true;
        }else if((matrizGanador[2][0]==numero)&&(matrizGanador[2][1]==numero)&&(matrizGanador[2][2]==numero)){
            //TERCERA COMBINACIÓN [HORIZONTAL]
            ganador = true;
        }else if((matrizGanador[0][0]==numero)&&(matrizGanador[1][0]==numero)&&(matrizGanador[2][0]==numero)){
            //CUARTA COMBINACIÓN [VERTICAL]
            ganador = true;
        }else if((matrizGanador[0][1]==numero)&&(matrizGanador[1][1]==numero)&&(matrizGanador[2][1]==numero)){
            //QUINTA COMBINACIÓN [VERTICAL]
            ganador = true;
        }else if((matrizGanador[0][2]==numero)&&(matrizGanador[1][2]==numero)&&(matrizGanador[2][2]==numero)){
            //SEXTA COMBINACIÓN [VERTICAL]
            ganador = true;
        }else if((matrizGanador[0][0]==numero)&&(matrizGanador[1][1]==numero)&&(matrizGanador[2][2]==numero)){
            //SEPTIMA COMBINACIÓN [DIAGONAL]
            ganador = true;
        }else if((matrizGanador[0][2]==numero)&&(matrizGanador[1][1]==numero)&&(matrizGanador[2][0]==numero)){
            //OCTAVA COMBINACIÓN [DIAGONAL]
            ganador = true;
        }
        return ganador;
    }
    private void reiniciarJuego(){
        llenarCasillas();                                                       //REINICIA VALORES DE LA MATRIZ
        llenarMatrizGanador();                                                  //REINICIA VALORES DE LA MATRIZ
        //INICIA ABAJO EL REINICIO DE IMAGENES DE LOS BOTONES
        botonArribaIzquierda.setIcon(null);
        botonCentroArriba.setIcon(null);
        botonArribaDerecha.setIcon(null);
        botonCentroIzquierda.setIcon(null);
        botonCentro.setIcon(null);
        botonCentroDerecha.setIcon(null);
        botonAbajoIzquierda.setIcon(null);
        botonCentroAbajo.setIcon(null);
        botonAbajoDerecha.setIcon(null);
        //TERMINA ARRIBA EL REINICIO DE IMAGENES DE LOS BOTONES
        quienJuegaPrimero();
    }
    private void quienJuegaPrimero(){
        VentanaEscogerTurno VET = new VentanaEscogerTurno(this, true, jugador1, jugador2);
        VET.setVisible(true);
        turno = VET.getTurno();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaJuego(null, null).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar barraDeMenu;
    private javax.swing.JButton botonAbajoDerecha;
    private javax.swing.JButton botonAbajoIzquierda;
    private javax.swing.JButton botonArribaDerecha;
    private javax.swing.JButton botonArribaIzquierda;
    private javax.swing.JButton botonCentro;
    private javax.swing.JButton botonCentroAbajo;
    private javax.swing.JButton botonCentroArriba;
    private javax.swing.JButton botonCentroDerecha;
    private javax.swing.JButton botonCentroIzquierda;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenu menuJuego;
    private javax.swing.JPanel panelPrincipal1;
    private javax.swing.JPopupMenu.Separator separador1;
    private javax.swing.JMenuItem subMenuMostrarResultados;
    private javax.swing.JMenuItem subMenuReiniciarJuego;
    private javax.swing.JMenuItem subMenuSalir;
    // End of variables declaration//GEN-END:variables
}