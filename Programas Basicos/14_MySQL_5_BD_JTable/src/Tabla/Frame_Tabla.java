package Tabla;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class Frame_Tabla extends javax.swing.JFrame {
    public Frame_Tabla() {
        initComponents();
        this.setMinimumSize(new Dimension(710, 520));
        this.setExtendedState(MAXIMIZED_BOTH);
        this.setLocationRelativeTo(null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelPrincipal = new javax.swing.JPanel();
        scrollPaneTablaProducto = new javax.swing.JScrollPane();
        tablaProducto = new javax.swing.JTable();
        botonActualizarTabla = new javax.swing.JButton();
        etiquetaCodigo = new javax.swing.JLabel();
        textFieldCodigo = new javax.swing.JTextField();
        etiquetaMostrarCodigo = new javax.swing.JLabel();
        etiquetaMostrarNombre = new javax.swing.JLabel();
        etiquetaMostrarPrecio = new javax.swing.JLabel();
        etiquetaMostrarCantidadDisponible = new javax.swing.JLabel();
        textFieldMostrarCodigo = new javax.swing.JTextField();
        textFieldMostrarNombre = new javax.swing.JTextField();
        textFieldMostrarPrecio = new javax.swing.JTextField();
        textFieldMostrarCantidadDisponible = new javax.swing.JTextField();
        botonInsertar = new javax.swing.JButton();
        botonModificar = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();
        botonLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelPrincipal.setBackground(new java.awt.Color(51, 0, 0));
        panelPrincipal.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        panelPrincipal.setForeground(new java.awt.Color(255, 255, 255));
        panelPrincipal.setLayout(new java.awt.GridBagLayout());

        tablaProducto.setBackground(new java.awt.Color(51, 51, 51));
        tablaProducto.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tablaProducto.setForeground(new java.awt.Color(255, 255, 255));
        tablaProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Codigo", "Nombre", "Precio", "Cantidad Disponible"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaProducto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaProductoMouseClicked(evt);
            }
        });
        scrollPaneTablaProducto.setViewportView(tablaProducto);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelPrincipal.add(scrollPaneTablaProducto, gridBagConstraints);

        botonActualizarTabla.setBackground(new java.awt.Color(51, 51, 51));
        botonActualizarTabla.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        botonActualizarTabla.setForeground(new java.awt.Color(255, 255, 255));
        botonActualizarTabla.setText("ACTUALIZAR TABLA");
        botonActualizarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarTablaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelPrincipal.add(botonActualizarTabla, gridBagConstraints);

        etiquetaCodigo.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        etiquetaCodigo.setForeground(new java.awt.Color(255, 255, 255));
        etiquetaCodigo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        etiquetaCodigo.setText("BUSCAR CÓDIGO:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelPrincipal.add(etiquetaCodigo, gridBagConstraints);

        textFieldCodigo.setBackground(new java.awt.Color(51, 51, 51));
        textFieldCodigo.setFont(new java.awt.Font("Arial", 2, 18)); // NOI18N
        textFieldCodigo.setForeground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelPrincipal.add(textFieldCodigo, gridBagConstraints);

        etiquetaMostrarCodigo.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        etiquetaMostrarCodigo.setForeground(new java.awt.Color(255, 255, 255));
        etiquetaMostrarCodigo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        etiquetaMostrarCodigo.setText("CÓDIGO:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelPrincipal.add(etiquetaMostrarCodigo, gridBagConstraints);

        etiquetaMostrarNombre.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        etiquetaMostrarNombre.setForeground(new java.awt.Color(255, 255, 255));
        etiquetaMostrarNombre.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        etiquetaMostrarNombre.setText("NOMBRE:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelPrincipal.add(etiquetaMostrarNombre, gridBagConstraints);

        etiquetaMostrarPrecio.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        etiquetaMostrarPrecio.setForeground(new java.awt.Color(255, 255, 255));
        etiquetaMostrarPrecio.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        etiquetaMostrarPrecio.setText("PRECIO:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelPrincipal.add(etiquetaMostrarPrecio, gridBagConstraints);

        etiquetaMostrarCantidadDisponible.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        etiquetaMostrarCantidadDisponible.setForeground(new java.awt.Color(255, 255, 255));
        etiquetaMostrarCantidadDisponible.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        etiquetaMostrarCantidadDisponible.setText("CANTIDAD DISPONIBLE:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelPrincipal.add(etiquetaMostrarCantidadDisponible, gridBagConstraints);

        textFieldMostrarCodigo.setBackground(new java.awt.Color(204, 204, 204));
        textFieldMostrarCodigo.setFont(new java.awt.Font("Arial", 2, 18)); // NOI18N
        textFieldMostrarCodigo.setForeground(new java.awt.Color(0, 0, 0));
        textFieldMostrarCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldMostrarCodigoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelPrincipal.add(textFieldMostrarCodigo, gridBagConstraints);

        textFieldMostrarNombre.setBackground(new java.awt.Color(204, 204, 204));
        textFieldMostrarNombre.setFont(new java.awt.Font("Arial", 2, 18)); // NOI18N
        textFieldMostrarNombre.setForeground(new java.awt.Color(0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelPrincipal.add(textFieldMostrarNombre, gridBagConstraints);

        textFieldMostrarPrecio.setBackground(new java.awt.Color(204, 204, 204));
        textFieldMostrarPrecio.setFont(new java.awt.Font("Arial", 2, 18)); // NOI18N
        textFieldMostrarPrecio.setForeground(new java.awt.Color(0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelPrincipal.add(textFieldMostrarPrecio, gridBagConstraints);

        textFieldMostrarCantidadDisponible.setBackground(new java.awt.Color(204, 204, 204));
        textFieldMostrarCantidadDisponible.setFont(new java.awt.Font("Arial", 2, 18)); // NOI18N
        textFieldMostrarCantidadDisponible.setForeground(new java.awt.Color(0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelPrincipal.add(textFieldMostrarCantidadDisponible, gridBagConstraints);

        botonInsertar.setBackground(new java.awt.Color(51, 51, 51));
        botonInsertar.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        botonInsertar.setForeground(new java.awt.Color(255, 255, 255));
        botonInsertar.setText("INSERTAR");
        botonInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonInsertarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelPrincipal.add(botonInsertar, gridBagConstraints);

        botonModificar.setBackground(new java.awt.Color(51, 51, 51));
        botonModificar.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        botonModificar.setForeground(new java.awt.Color(255, 255, 255));
        botonModificar.setText("MODIFICAR");
        botonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelPrincipal.add(botonModificar, gridBagConstraints);

        botonEliminar.setBackground(new java.awt.Color(51, 51, 51));
        botonEliminar.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        botonEliminar.setForeground(new java.awt.Color(255, 255, 255));
        botonEliminar.setText("ELIMINAR");
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelPrincipal.add(botonEliminar, gridBagConstraints);

        botonLimpiar.setBackground(new java.awt.Color(51, 51, 51));
        botonLimpiar.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        botonLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        botonLimpiar.setText("LIMPIAR");
        botonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelPrincipal.add(botonLimpiar, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void botonActualizarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarTablaActionPerformed
        DefaultTableModel modeloTabla1 = new DefaultTableModel();               //MODELO
        tablaProducto.setModel(modeloTabla1);                                   //MODELO
        String campo = textFieldCodigo.getText();
        String where = (textFieldCodigo.getText().isEmpty()) ? "" : "where codigoProducto='"+campo+"'";
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            Clase_Conexion con = new Clase_Conexion();
            Connection conexion = con.getConnection();
            pst = conexion.prepareStatement("select codigoProducto,nombreProducto,precioProducto,cantidadProducto from producto "+where);
            rst = pst.executeQuery();
            modeloTabla1.addColumn("Codigo");
            modeloTabla1.addColumn("Nombre");
            modeloTabla1.addColumn("Precio");
            modeloTabla1.addColumn("Cantidad Disponible");
            ResultSetMetaData rsmt = rst.getMetaData();                         //NUMERO DE COLUMNAS [NO MODIFICAR]
            int cantidadDeColumnas = rsmt.getColumnCount();
            int anchos[] = {50,150,50,70};                                      //ANCHO PREDEFINICO [MODIFICAR]
            for (int i = 0; i < cantidadDeColumnas; i++) {
                tablaProducto.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
            }
            while(rst.next()){
                Object fila[] = new Object[cantidadDeColumnas];
                for (int i = 0; i < cantidadDeColumnas; i++) {
                    fila[i] = rst.getObject(i+1);
                }
                modeloTabla1.addRow(fila);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "ERROR DE CONEXION... DESDE BOTON ACTUALIZAR");
        }
    }//GEN-LAST:event_botonActualizarTablaActionPerformed
    private void textFieldMostrarCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldMostrarCodigoActionPerformed
        //VACÍO
    }//GEN-LAST:event_textFieldMostrarCodigoActionPerformed
    private void tablaProductoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaProductoMouseClicked
        PreparedStatement pst = null;
        ResultSet rst = null;
        try {
            Clase_Conexion con = new Clase_Conexion();
            Connection conexion = con.getConnection();
            int fila = tablaProducto.getSelectedRow();
            String codigoProducto = tablaProducto.getValueAt(fila, 0).toString();
            pst = conexion.prepareStatement("select codigoProducto,nombreProducto,precioProducto,cantidadProducto from producto where codigoProducto=?");
            pst.setString(1, codigoProducto);
            rst = pst.executeQuery();
            while(rst.next()){
                textFieldMostrarCodigo.setText(rst.getString("codigoProducto"));
                textFieldMostrarNombre.setText(rst.getString("nombreProducto"));
                textFieldMostrarPrecio.setText(String.valueOf(rst.getDouble("precioProducto")));
                textFieldMostrarCantidadDisponible.setText(String.valueOf(rst.getInt("cantidadProducto")));
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "ERROR DE CONEXION... DESDE EVENTO DE TABLA");
        }
    }//GEN-LAST:event_tablaProductoMouseClicked
    private void botonInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonInsertarActionPerformed
        PreparedStatement pst = null;
        if ((textFieldMostrarCodigo.getText().isEmpty()) ||
            (textFieldMostrarNombre.getText().isEmpty()) ||
            (textFieldMostrarPrecio.getText().isEmpty()) ||
            (textFieldMostrarCantidadDisponible.getText().isEmpty())) {
            JOptionPane.showMessageDialog(null, "RELLENE TODOS LOS CAMPOS PARA PODER INSERTAR");
        }else{
            try {
                Clase_Conexion con = new Clase_Conexion();
                Connection conexion = con.getConnection();
                pst = conexion.prepareStatement("insert into producto (codigoProducto, nombreProducto, precioProducto, cantidadProducto) values (?,?,?,?)");
                pst.setString(1, textFieldMostrarCodigo.getText());
                pst.setString(2, textFieldMostrarNombre.getText());
                pst.setDouble(3, Double.parseDouble(textFieldMostrarPrecio.getText()));
                pst.setInt(4, Integer.parseInt(textFieldMostrarCantidadDisponible.getText()));
                int resultadoInsertar = pst.executeUpdate();
                if (resultadoInsertar > 0) {
                    JOptionPane.showMessageDialog(null, "PRODUCTO INSERTADO CORRECTAMENTE");
                    limpiarCampos();
                }else{
                    JOptionPane.showMessageDialog(null, "NO SE PUDO INSERTAR EL PRODUCTO");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "ERROR DE CONEXION... DESDE BOTON INSERTAR");
            }
        }
    }//GEN-LAST:event_botonInsertarActionPerformed
    private void botonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarActionPerformed
        PreparedStatement pst = null;
        if ((textFieldMostrarCodigo.getText().isEmpty()) ||
            (textFieldMostrarNombre.getText().isEmpty()) ||
            (textFieldMostrarPrecio.getText().isEmpty()) ||
            (textFieldMostrarCantidadDisponible.getText().isEmpty())) {
            JOptionPane.showMessageDialog(null, "RELLENE TODOS LOS CAMPOS PARA PODER MODIFICAR");
        }else{
            try {
                Clase_Conexion con = new Clase_Conexion();
                Connection conexion = con.getConnection();
                pst = conexion.prepareStatement("update producto set codigoProducto=?, nombreProducto=?, precioProducto=?, cantidadProducto=? where codigoProducto=?");
                pst.setString(1, textFieldMostrarCodigo.getText());
                pst.setString(2, textFieldMostrarNombre.getText());
                pst.setDouble(3, Double.parseDouble(textFieldMostrarPrecio.getText()));
                pst.setInt(4, Integer.parseInt(textFieldMostrarCantidadDisponible.getText()));
                pst.setString(5, textFieldMostrarCodigo.getText());
                int resultadoModificar = pst.executeUpdate();
                if (resultadoModificar > 0) {
                    JOptionPane.showMessageDialog(null, "PRODUCTO MODIFICADO CORRECTAMENTE");
                }else{
                    JOptionPane.showMessageDialog(null, "NO SE PUDO MODIFICAR EL PRODUCTO");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "ERROR DE CONEXION... DESDE BOTON MODIFICAR");
            }
        }
    }//GEN-LAST:event_botonModificarActionPerformed
    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
        PreparedStatement pst = null;
        if ((textFieldMostrarCodigo.getText().isEmpty()) ||
            (textFieldMostrarNombre.getText().isEmpty()) ||
            (textFieldMostrarPrecio.getText().isEmpty()) ||
            (textFieldMostrarCantidadDisponible.getText().isEmpty())) {
            JOptionPane.showMessageDialog(null, "RELLENE TODOS LOS CAMPOS PARA PODER ELIMINAR");
        }else{
            try {
                Clase_Conexion con = new Clase_Conexion();
                Connection conexion = con.getConnection();
                pst = conexion.prepareStatement("delete from producto where codigoProducto=?");
                pst.setString(1, textFieldMostrarCodigo.getText());
                int resultadoEliminar = pst.executeUpdate();
                if (resultadoEliminar > 0) {
                    JOptionPane.showMessageDialog(null, "PRODUCTO ELIMINADO CORRECTAMENTE");
                    limpiarCampos();
                }else{
                    JOptionPane.showMessageDialog(null, "NO SE PUDO ELIMINAR EL PRODUCTO");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "ERROR DE CONEXION... DESDE BOTON ELIMINAR");
            }
        }
    }//GEN-LAST:event_botonEliminarActionPerformed
    private void botonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiarActionPerformed
        limpiarCampos();
        JOptionPane.showMessageDialog(null, "CAMPOS LIMPIADOS CORRECTAMENTE");
    }//GEN-LAST:event_botonLimpiarActionPerformed
    public void limpiarCampos(){
        textFieldCodigo.setText("");
        textFieldMostrarCodigo.setText("");
        textFieldMostrarNombre.setText("");
        textFieldMostrarPrecio.setText("");
        textFieldMostrarCantidadDisponible.setText("");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame_Tabla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame_Tabla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame_Tabla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame_Tabla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame_Tabla().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonActualizarTabla;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonInsertar;
    private javax.swing.JButton botonLimpiar;
    private javax.swing.JButton botonModificar;
    private javax.swing.JLabel etiquetaCodigo;
    private javax.swing.JLabel etiquetaMostrarCantidadDisponible;
    private javax.swing.JLabel etiquetaMostrarCodigo;
    private javax.swing.JLabel etiquetaMostrarNombre;
    private javax.swing.JLabel etiquetaMostrarPrecio;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JScrollPane scrollPaneTablaProducto;
    private javax.swing.JTable tablaProducto;
    private javax.swing.JTextField textFieldCodigo;
    private javax.swing.JTextField textFieldMostrarCantidadDisponible;
    private javax.swing.JTextField textFieldMostrarCodigo;
    private javax.swing.JTextField textFieldMostrarNombre;
    private javax.swing.JTextField textFieldMostrarPrecio;
    // End of variables declaration//GEN-END:variables
}